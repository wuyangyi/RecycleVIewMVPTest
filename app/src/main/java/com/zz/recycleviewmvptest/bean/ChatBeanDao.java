package com.zz.recycleviewmvptest.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zz.recycleviewmvptest.bean.ChatBean.UserConverter;
import com.zz.recycleviewmvptest.bean.FlListBean.ResultsListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_BEAN".
*/
public class ChatBeanDao extends AbstractDao<ChatBean, Long> {

    public static final String TABLENAME = "CHAT_BEAN";

    /**
     * Properties of entity ChatBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User = new Property(1, String.class, "user", false, "USER");
        public final static Property Create_time = new Property(2, long.class, "create_time", false, "CREATE_TIME");
        public final static Property Send_time = new Property(3, String.class, "send_time", false, "SEND_TIME");
        public final static Property Context = new Property(4, String.class, "context", false, "CONTEXT");
        public final static Property IsMe = new Property(5, boolean.class, "isMe", false, "IS_ME");
        public final static Property UserId = new Property(6, String.class, "userId", false, "USER_ID");
    }

    private final UserConverter userConverter = new UserConverter();

    public ChatBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChatBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER\" TEXT," + // 1: user
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 2: create_time
                "\"SEND_TIME\" TEXT," + // 3: send_time
                "\"CONTEXT\" TEXT," + // 4: context
                "\"IS_ME\" INTEGER NOT NULL ," + // 5: isMe
                "\"USER_ID\" TEXT);"); // 6: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        ResultsListBean user = entity.getUser();
        if (user != null) {
            stmt.bindString(2, userConverter.convertToDatabaseValue(user));
        }
        stmt.bindLong(3, entity.getCreate_time());
 
        String send_time = entity.getSend_time();
        if (send_time != null) {
            stmt.bindString(4, send_time);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(5, context);
        }
        stmt.bindLong(6, entity.getIsMe() ? 1L: 0L);
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        ResultsListBean user = entity.getUser();
        if (user != null) {
            stmt.bindString(2, userConverter.convertToDatabaseValue(user));
        }
        stmt.bindLong(3, entity.getCreate_time());
 
        String send_time = entity.getSend_time();
        if (send_time != null) {
            stmt.bindString(4, send_time);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(5, context);
        }
        stmt.bindLong(6, entity.getIsMe() ? 1L: 0L);
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatBean readEntity(Cursor cursor, int offset) {
        ChatBean entity = new ChatBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : userConverter.convertToEntityProperty(cursor.getString(offset + 1)), // user
            cursor.getLong(offset + 2), // create_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // send_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // context
            cursor.getShort(offset + 5) != 0, // isMe
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser(cursor.isNull(offset + 1) ? null : userConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setCreate_time(cursor.getLong(offset + 2));
        entity.setSend_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContext(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsMe(cursor.getShort(offset + 5) != 0);
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
