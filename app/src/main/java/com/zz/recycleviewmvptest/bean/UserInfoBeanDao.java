package com.zz.recycleviewmvptest.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_BEAN".
*/
public class UserInfoBeanDao extends AbstractDao<UserInfoBean, Long> {

    public static final String TABLENAME = "USER_INFO_BEAN";

    /**
     * Properties of entity UserInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property School = new Property(2, String.class, "school", false, "SCHOOL");
        public final static Property Age = new Property(3, int.class, "age", false, "AGE");
        public final static Property Sex = new Property(4, int.class, "sex", false, "SEX");
        public final static Property Head = new Property(5, String.class, "head", false, "HEAD");
        public final static Property Create_time = new Property(6, long.class, "create_time", false, "CREATE_TIME");
        public final static Property Password = new Property(7, String.class, "password", false, "PASSWORD");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property IsLogin = new Property(9, boolean.class, "isLogin", false, "IS_LOGIN");
        public final static Property IsAdmin = new Property(10, boolean.class, "isAdmin", false, "IS_ADMIN");
    }


    public UserInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NICKNAME\" TEXT," + // 1: nickname
                "\"SCHOOL\" TEXT," + // 2: school
                "\"AGE\" INTEGER NOT NULL ," + // 3: age
                "\"SEX\" INTEGER NOT NULL ," + // 4: sex
                "\"HEAD\" TEXT," + // 5: head
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 6: create_time
                "\"PASSWORD\" TEXT," + // 7: password
                "\"PHONE\" TEXT," + // 8: phone
                "\"IS_LOGIN\" INTEGER NOT NULL ," + // 9: isLogin
                "\"IS_ADMIN\" INTEGER NOT NULL );"); // 10: isAdmin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(3, school);
        }
        stmt.bindLong(4, entity.getAge());
        stmt.bindLong(5, entity.getSex());
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(6, head);
        }
        stmt.bindLong(7, entity.getCreate_time());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(8, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
        stmt.bindLong(10, entity.getIsLogin() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsAdmin() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(3, school);
        }
        stmt.bindLong(4, entity.getAge());
        stmt.bindLong(5, entity.getSex());
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(6, head);
        }
        stmt.bindLong(7, entity.getCreate_time());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(8, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
        stmt.bindLong(10, entity.getIsLogin() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsAdmin() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfoBean readEntity(Cursor cursor, int offset) {
        UserInfoBean entity = new UserInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // school
            cursor.getInt(offset + 3), // age
            cursor.getInt(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // head
            cursor.getLong(offset + 6), // create_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // password
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.getShort(offset + 9) != 0, // isLogin
            cursor.getShort(offset + 10) != 0 // isAdmin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSchool(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.getInt(offset + 3));
        entity.setSex(cursor.getInt(offset + 4));
        entity.setHead(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreate_time(cursor.getLong(offset + 6));
        entity.setPassword(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsLogin(cursor.getShort(offset + 9) != 0);
        entity.setIsAdmin(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
